// Generated by CoffeeScript 1.6.2
/* ------- Module dependencies. ------------
*/

var AppClass, LogClass, app, appConfig, appOption, async, cluster, database, database_root, engine, express, http, log4js, logConfig, node_modules, sequelize, server;

express = require('express');

cluster = require('cluster');

engine = require('ejs-locals');

http = require('http');

log4js = require('crafity-log4js');

sequelize = require('sequelize');

async = require('async');

app = express();

/* ------- Class ---------------------------
*/


appOption = require('./config/test_option.json');

AppClass = require('./routes/System/AppClass');

LogClass = require('./routes/System/LogClass');

appConfig = new AppClass.AppClass();

logConfig = new LogClass.LogClass();

node_modules = {};

node_modules.express = express;

node_modules.cluster = cluster;

node_modules.engine = engine;

node_modules.http = http;

node_modules.log4js = log4js;

node_modules.sequelize = sequelize;

node_modules.async = async;

node_modules.appClass = appConfig;

/* ------- middleware ------------------------
*/


app.configure(function() {
  var logger;

  app.set('port', appConfig.getPort());
  app.set('views', appConfig.getView());
  app.engine('ejs', engine);
  app.set('view engine', appConfig.getEngine());
  app.use(express.favicon(appConfig.getFavicon()));
  logger = log4js.getLogger('file');
  log4js.configure(logConfig.settings);
  app.use(log4js.connectLogger(logger, logConfig.connect()));
  app.use(express.compress(appConfig.compress));
  app.use(express.bodyParser(appConfig.upload()));
  app.use(express.methodOverride());
  app.use(express["static"](appConfig.getPublic()));
  return console.log("app opption setup.");
});

/* ------- create httpServer.-----------------
*/


if (cluster.isMaster) {
  server = http.createServer(app);
  database_root = "./database/database";
  database = require(database_root)({
    config: appOption,
    node_modules: node_modules
  });
  server.listen(app.get('port'), function() {
    var controller;

    console.log("Master Server listening on " + (app.get('port')));
    controller = "" + __dirname + "/routes/controller";
    return require(controller)({
      app: app,
      database: database,
      node_modules: node_modules
    });
  });
}

/* ------- Error. -----------------------------------------
*/


process.on('uncaughtException', function(err) {
  console.log("err >  " + err);
  return console.error("uncaughtException >  " + err.stack);
});

/*
//@ sourceMappingURL=webServer.map
*/
